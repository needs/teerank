generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterServer {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  address     String
  port        Int
  gameServers GameServer[]

  @@unique([address, port])
}

model GameServer {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  offlineSince DateTime?

  ip   String
  port Int

  masterServer   MasterServer? @relation(fields: [masterServerId], references: [id])
  masterServerId Int?

  snapshots GameServerSnapshot[] @relation(name: "GameServerSnapshotGameServerId")

  lastSnapshot   GameServerSnapshot? @relation(fields: [lastSnapshotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lastSnapshotId Int?                @unique

  @@unique([ip, port])
}

model Player {
  name      String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clan     Clan?   @relation(fields: [clanName], references: [name])
  clanName String?

  playTime Int @default(0)

  playerInfos       PlayerInfo[]
  gameServerClients GameServerClient[]
  clanPlayerInfos   ClanPlayerInfo[]

  playerInfoMaps      PlayerInfoMap[]
  playerInfoGameTypes PlayerInfoGameType[]

  @@index([playTime(sort: Desc)])
}

enum RankMethod {
  ELO
  TIME
}

model GameType {
  name        String       @id
  createdAt   DateTime     @default(now())
  map         Map[]
  rankMethod  RankMethod?
  playTime    Int          @default(0)
  playerInfos PlayerInfo[]
  clanInfos   ClanInfo[]

  playerInfoGameTypes PlayerInfoGameType[]
  clanInfoGameTypes   ClanInfoGameType[]

  @@index([playTime(sort: Desc)])
}

model Map {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  playTime  Int      @default(0)

  gameType     GameType @relation(fields: [gameTypeName], references: [name], onDelete: Cascade)
  gameTypeName String

  snapshots      GameServerSnapshot[]
  playerInfos    PlayerInfo[]
  clanInfos      ClanInfo[]
  playerInfoMaps PlayerInfoMap[]
  clanInfoMaps   ClanInfoMap[]

  @@unique([name, gameTypeName])
  @@index([playTime(sort: Desc)])
}

model PlayerInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade)
  playerName String

  map   Map? @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId Int?

  rating   Float?
  playTime Int    @default(0)

  gameType     GameType? @relation(fields: [gameTypeName], references: [name], onDelete: Cascade)
  gameTypeName String?

  @@unique([playerName, mapId])
  @@unique([playerName, gameTypeName])
  @@index([playTime(sort: Desc)])
}

model PlayerInfoGameType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade)
  playerName String

  rating   Float?
  playTime Int    @default(0)

  gameType     GameType @relation(fields: [gameTypeName], references: [name], onDelete: Cascade)
  gameTypeName String

  clients GameServerClient[]

  @@unique([playerName, gameTypeName])
  @@index([playTime(sort: Desc)])
}

model PlayerInfoMap {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade)
  playerName String

  rating   Float?
  playTime Int    @default(0)

  map   Map @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId Int

  clients GameServerClient[]

  @@unique([playerName, mapId])
  @@index([playTime(sort: Desc)])
}

model GameServerClient {
  id Int @id @default(autoincrement())

  snapshot   GameServerSnapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  snapshotId Int

  player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade)
  playerName String

  clan     Clan?   @relation(fields: [clanName], references: [name], onDelete: Cascade)
  clanName String?

  playerInfoGameType   PlayerInfoGameType? @relation(fields: [playerInfoGameTypeId], references: [id], onDelete: Cascade)
  playerInfoGameTypeId Int?
  playerInfoMap        PlayerInfoMap?      @relation(fields: [playerInfoMapId], references: [id], onDelete: Cascade)
  playerInfoMapId      Int?

  clanInfoGameType   ClanInfoGameType? @relation(fields: [clanInfoGameTypeId], references: [id], onDelete: Cascade)
  clanInfoGameTypeId Int?
  clanInfoMap        ClanInfoMap?      @relation(fields: [clanInfoMapId], references: [id], onDelete: Cascade)
  clanInfoMapId      Int?

  score   Int
  country Int
  inGame  Boolean
}

model GameServerSnapshot {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  rankedAt    DateTime?
  playTimedAt DateTime?

  version String
  name    String
  map     Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId   Int

  numPlayers Int
  maxPlayers Int

  numClients Int
  maxClients Int

  clients GameServerClient[]

  gameServerLast GameServer?

  gameServerId Int
  gameServer   GameServer @relation(name: "GameServerSnapshotGameServerId", fields: [gameServerId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([rankedAt])
  @@index([playTimedAt])
}

model ClanInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clan     Clan   @relation(fields: [clanName], references: [name], onDelete: Cascade)
  clanName String

  map   Map? @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId Int?

  playTime Int @default(0)

  gameType     GameType? @relation(fields: [gameTypeName], references: [name], onDelete: Cascade)
  gameTypeName String?

  @@unique([clanName, mapId])
  @@unique([clanName, gameTypeName])
  @@index([playTime(sort: Desc)])
}

model ClanInfoGameType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clan     Clan   @relation(fields: [clanName], references: [name], onDelete: Cascade)
  clanName String

  playTime Int @default(0)

  gameType     GameType @relation(fields: [gameTypeName], references: [name], onDelete: Cascade)
  gameTypeName String

  clients GameServerClient[]

  @@unique([clanName, gameTypeName])
  @@index([playTime(sort: Desc)])
}

model ClanInfoMap {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clan     Clan   @relation(fields: [clanName], references: [name], onDelete: Cascade)
  clanName String

  playTime Int @default(0)

  map   Map @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId Int

  clients GameServerClient[]

  @@unique([clanName, mapId])
  @@index([playTime(sort: Desc)])
}

model Clan {
  name String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playTime Int      @default(0)
  players  Player[]

  clanInfos ClanInfo[]
  clients   GameServerClient[]

  clanPlayerInfos ClanPlayerInfo[]

  clanInfoGameTypes ClanInfoGameType[]
  clanInfoMaps      ClanInfoMap[]

  @@index([playTime(sort: Desc)])
}

model ClanPlayerInfo {
  clan     Clan   @relation(fields: [clanName], references: [name], onDelete: Cascade)
  clanName String

  player     Player @relation(fields: [playerName], references: [name], onDelete: Cascade)
  playerName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playTime Int @default(0)

  @@unique([clanName, playerName])
  @@index([playTime(sort: Desc)])
}

model Task {
  name        String    @id
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  index       Int       @default(0)

  runs TaskRun[]
}

enum TaskRunStatus {
  INCOMPLETE
  COMPLETED
  FAILED
}

model TaskRun {
  id         Int            @id @default(autoincrement())
  task       Task           @relation(fields: [taskName], references: [name], onDelete: Cascade)
  taskName   String
  startedAt  DateTime       @default(now())
  finishedAt DateTime?
  status     TaskRunStatus?
}
